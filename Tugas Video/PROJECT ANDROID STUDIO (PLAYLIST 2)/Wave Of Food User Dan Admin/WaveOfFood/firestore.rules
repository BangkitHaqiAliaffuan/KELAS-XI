rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.email in ['admin@waveoffood.com', 'admin@kelasxi.com'] ||
         request.auth.token.admin == true ||
         // Allow any authenticated user for admin app testing
         request.auth.token.email_verified == true);
    }
    
    // Helper function to check authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Categories - public read untuk enhanced design
    match /categories/{categoryId} {
      allow read: if true; // Public read untuk semua user
      allow write: if isAdmin(); // Admin access
    }
    
    // Foods - public read untuk enhanced design (UPDATE dari menu)
    match /foods/{foodId} {
      allow read: if true; // Public read untuk semua user
      allow write: if isAdmin(); // Admin access
    }
    
    // Menu - legacy collection with admin access
    match /menu/{menuItem} {
      allow read: if true; // Allow public read
      allow write: if isAdmin(); // Admin access
    }
    
    // Promotions - public read untuk enhanced design
    match /promotions/{promoId} {
      allow read: if true; // Public read untuk semua user
      allow write: if isAdmin(); // Admin access
    }
    
    // Reviews - authenticated read, owner write
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Users - UPDATED: Allow admin to read all users, users can read their own data
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      
      // Cart subcollection
      match /cart/{cartItem} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin());
      }
      
      // Favorites subcollection
      match /favorites/{foodId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin());
      }
      
      // Addresses subcollection
      match /addresses/{addressId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || isAdmin());
      }
    }
    
    // Orders - UPDATED: Allow admin to read all orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Test collection untuk connectivity testing
    match /test/{testDoc} {
      allow read, write: if isAuthenticated();
    }
    
    // Admin collection for admin-specific data
    match /admin/{adminDoc} {
      allow read, write: if isAdmin();
    }
    
    // Admins collection for admin user management
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
  }
}